(* ::Package:: *)

(************************************************************************)
(* 
Ahmed Alhamzawi
Department of Mathematis
College of Computer Science and Mathematics
Al-Qadisiya University
Iraq
*)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["Afak`"]
Unprotect@@Names["Afak`*"];
ClearAll@@Names["Afak`*"];
Define::usage="";
DeleteTensor::usage="";
TableTensor::usage="";
ReplaceTensor::usage="";
ListOfIntegers::usage="";
Calculate::usage="";
ReplaceIndices::usage="";
ClearIndices::usage="";
InnerTensor::usage="";
OuterTensor::usage="";
FindIndices::usage="";
SetSystem::usage="";
SuperReady::usage="";
Pow::usage="";
Sub::usage="";
PlusTensor::usage="";
\[CapitalTau]::usage="";
NF::usage="";
L::usage="";
\[Delta]::usage="";
\[CapitalGamma]::usage="";
\[ScriptCapitalD]::usage="";
Out\[CapitalTau]::usage="";
In\[CapitalTau]::usage="";
TensorComplete::usage="";
OnePower::usage="";
ListToProduct::usage="";
Pow::usage="";
MakeReady::usage="";
InverseTensor::usage="";
SeqTensor::usage="";
TR::usage="";
TensorForm::usage="";
StringList::usage="";
SumIndices::usage="";
Object::usage="";
RepeatedIndices::usage="";
LORI::usage="";
TopIndex::usage="";
DownIndex::usage="";
TensorIndices::usage="";
Original::usage="";
NumberIndices::usage="";
TensorName::usage="";
Indices::usage="";
HD::usage="";
ListOfIndices::usage="";
Leave::usage="";
FindTensorIfExists::usage="";
FindObjectIfExists::usage="";
CovariantDerivative::usage="";
TensorToPower::usage="";
ReturnIR::usage="";
\[ScriptCapitalD]O::usage="";
NormalDerivative::usage="";
CovariantDerivative::usage="";
PickElement::usage="";
PickElement2::usage="";
Take$::usage="";
First$::usage="";
UndoTensorForm::usage="";
ExpandIndex::usage="";
ContractIndex::usage="";
\[Delta]Tensor::usage="";
DivideAndConquer::usage="";
UnContract::usage="";
UnContract3::usage="";
UnContractable::usage="";
SimplifyTensor::usage="";
SimplifyTensor$::usage="";
EvaExp::usage="";
IR::usage="";
Begin["`Private`"];
(*-----------------------------------------------*)
Tensors={};
SetSystem[N_,M_]:=Module[{N0=N,M0=M},
Len=N0;
MyVariable=M0;
];
Define[A_]:=Module[{},DeleteTensor[Take$[A,2]];Tensors=Prepend[Tensors,A];]
DeleteTensor[A_]:=Module[{l0},
l0=Table[Flatten[Position[Map[Part[#,r0]&,Tensors],Part[A,r0]]],{r0,1,Length[A]}];
l0=If[Length[l0]==0,List[],Apply[Intersection,l0]];
For[r0=1,r0<=Length[l0],r0++,
Tensors=ReplacePart[Tensors,Part[l0,r0]->Deleteit];
];
Tensors=DeleteCases[Tensors,Deleteit];
]
TableTensor[A_,B_]:=ReplaceAll[
Apply[Table,
Join[
List[
CalculateStop[
ReplaceIndicesStop[
A,
Map[#->ToExpression[StringJoin["Table",ToString[#]]]&,B]
]
]
]
,
Map[{ToExpression[StringJoin["Table",ToString[#]]],1,3}&,B]
]
]
,{ReplaceIndicesStop->ReplaceIndices,CalculateStop->Calculate}]
ReplaceTensor[A0_,B0_]:=Module[{X0=UndoTensorForm[A0],X1,Input\[CapitalTau]},
Input\[CapitalTau][Z0_,Z1_,Z2_]:=\[CapitalTau][Z0,Map[ToExpression[StringJoin[ToString[#],"_"]]&,Z1],Map[ToExpression[StringJoin[ToString[#],"_"]]&,Z2]];
For[r0=1,r0<=Length[B0],r0++,
X1=Map[UndoTensorForm[EvaExp[#]]&,ReplaceAll[Part[B0,r0],{Rule->List}]];
X0=ReplaceAll[X0,{ReplaceAll[First[X1],{\[CapitalTau]->Input\[CapitalTau]}]->Last[X1]}];
X0=DivideAndConquer[X0];
];
TR[X0]
]
(******************************************)
ListOfIntegers[A_]:=Length[DeleteCases[A,_Integer]]==0
(******************************************)
Calculate[A_]:=Module[{list0=UndoTensorForm[ExpandIndex[A]],EvaluateObject},
list0=list0=Map[Flatten[List[ReplaceAll[#,{Times->List}]]]&,Flatten[List[ReplaceAll[list0,{Plus->List}]]]];
EvaluateObject[A0_]:=Module[{list3=A0},
If[Head[A0]===\[CapitalTau],
If[Length[Flatten[FindIndices[A0,6]]]==0||!ListOfIntegers[Join[ReplaceAll[A0,{\[CapitalTau]->TopIndex}],ReplaceAll[A0,{\[CapitalTau]->DownIndex}]]],A0
,
Fold[Part,FindIndices[ReplaceAll[A0,{\[CapitalTau]->FindObjectIfExists}],6],Join[ReplaceAll[A0,{\[CapitalTau]->TopIndex}],ReplaceAll[A0,{\[CapitalTau]->DownIndex}]]
]
]

,
If[Length[Flatten[FindIndices[First[A0],6]]]==0||!ListOfIntegers[Join[ReplaceAll[A0,{\[CapitalTau]->TopIndex,Subscript[\[ScriptCapitalD], 1]->TopIndex}],ReplaceAll[A0,{\[CapitalTau]->DownIndex,Subscript[\[ScriptCapitalD], 1]->DownIndex}]]
],A0,
Fold[
D[#1,Subscript[MyVariable, #2]]&
,
Fold[Part,FindIndices[ReplaceAll[First[A0],{\[CapitalTau]->FindObjectIfExists}],6],Join[ReplaceAll[First[A0],{\[CapitalTau]->TopIndex}],ReplaceAll[First[A0],{\[CapitalTau]->DownIndex}]]
]
,
Last[A0]
]
]
]
];
list0=Map[If[NumberQ[#],#,EvaluateObject[#]]&,list0,List[2]];
list0=Map[Apply[Plus,#]&,Map[Apply[Times,#]&,list0,List[1]],List[0]];
TR[list0]
]

(******************************************)
ReplaceIndices[A_,B_]:=TR[ReplaceAll[UndoTensorForm[A],B]]
(******************************************)
(*Modified Functions*)
Take$[A0_,n0_]:=If[Abs[n0]<=Length[A0],Take[A0,n0],A0];
First$[A0_]:=If[Length[A0]==0,A0,First[A0]]
UndoTensorForm[A_]:=Module[{l0},
l0=Map[Flatten[List[ReplaceAll[#,{Times->List}]]]&,Flatten[List[ReplaceAll[A,{Plus->List}]]]];
l0=
Map[
If[Head[#]===Subsuperscript,
Module[{k0,k1,k2,k3},
k0=#;
k1=k0[[1]];
k2=Map[If[#==",",#,ToExpression[#]]&,Characters[k0[[2]]]];
k3=Map[If[#==",",#,ToExpression[#]]&,Characters[k0[[3]]]];
If[Length[Flatten[Position[k2,","]]]==0,
\[CapitalTau][k1,k3,k2]
,
Subscript[\[ScriptCapitalD], 1][\[CapitalTau][k1,k3,Take[k2,First[Flatten[Position[k2,","]]]-1]]
,
Drop[k2,First[Flatten[Position[k2,","]]]]
]
]
]
,
#
]
&,l0,List[2]
];
l0=Map[Apply[Times,#]&,l0,List[1]];
l0=Map[Apply[Plus,#]&,l0,List[0]];
l0
]
ExpandIndex[A_]:=TR[SumIndices[UndoTensorForm[A]]]
ContractIndex[A_]:=TR[UnContract[ReplaceAll[UndoTensorForm[A],{Subscript[\[ScriptCapitalD], 1]->NormalDerivative}]]]
(*End Modified Functions*)
(*Converting to \[CapitalTau]*)
SuperReady[A_]:=ReplaceAll[Module[{a0=MakeReady[A],a1=MakeReady[A]},a0=DeleteCases[DeleteDuplicates[Flatten[{ReplaceAll[a0,{Plus->List,Times->List,\[CapitalTau]->NF,Subscript[\[ScriptCapitalD],\[Alpha]_]->TensorName}]}]],0];
a0=Complement[a0,Select[a0,NumericQ]];
a0=Join[Table[Intersection[Flatten[Tensors],a0][[r0]]->\[CapitalTau][Intersection[Flatten[Tensors],a0][[r0]],{1},{}],{r0,1,Length[Intersection[Flatten[Tensors],a0]]}],Table[Complement[a0,Flatten[Tensors]][[r0]]->\[CapitalTau][Complement[a0,Flatten[Tensors]][[r0]],{},{}],{r0,1,Length[Complement[a0,Flatten[Tensors]]]}]];
ReplaceAll[ReplaceAll[ReplaceAll[a1,{\[CapitalTau]->In\[CapitalTau]}],a0],{\[CapitalTau]->Out\[CapitalTau]}]],{\[CapitalTau]->\[CapitalTau]}]

Out\[CapitalTau][A_,a_,b_]:=\[CapitalTau][ToExpression[A],a,b]
In\[CapitalTau][A_,a_,b_]:=\[CapitalTau][ToString[A],a,b]
MakeReady[A_]:=ReplaceAll[Release[ReplaceAll[Hold[A],{Power->Pow,Subscript->InTensor}]],{InTensor->Sub}];InverseTensor[A_,a_,b_]:=
If[Part[a,1]===$Failed,
Module[{A0=ToExpression[StringJoin["Inverse",ToString[A]]]},
If[Part[a,2]===1,
\[CapitalTau][A0,b,{}]
,
\[CapitalTau][A0,b,Delete[a,1]]
]
]
,\[CapitalTau][A,a,b]
]
OnePower[A_,a_,b_]:=Module[{l0},l0=Part[Tensors,First$[First$[Position[ReplaceAll[ReplaceAll[Tensors,{Subscript[\[ScriptCapitalD],\[Alpha]2_]->NF}],{Power->NF,Subscript->NF}],{A,\[Alpha]_,Length[b],\[Beta]_,\[Chi]_}]]]];
l0=If[Length[l0]==0,Part[Tensors,First$[First$[Position[ReplaceAll[ReplaceAll[Tensors,{Subscript[\[ScriptCapitalD],\[Alpha]2_]->NF}],{Power->NF,Subscript->NF}],{A,\[Alpha]_,Length[b]}]]]],l0];
If[Length[l0]==0,\[CapitalTau][A,a,b],If[l0[[2]]==1&&Length[a]!=l0[[2]],\[CapitalTau][A,{1},b],\[CapitalTau][A,a,b]]]]
Pow[A_,a_]:=If[IntegerQ[ReplaceAll[A,{InTensor->NF}]],PlusTensor[ReplaceAll[A,{InTensor->SeqTensor}],ReplaceAll[a,{Plus->List}]],PlusTensor[A,{},ReplaceAll[a,{Plus->List}]]]
PlusTensor[A_,a_,b_]:=If[Length[Flatten[{b}]]==1,TensorComplete[A,a,L[b]],Product[TensorComplete[A,a,L[Flatten[b][[I6]]]],{I6,1,Length[b]}]]
ListToProduct[A_]:=Product[A[[\[CapitalIota]2]],{\[CapitalIota]2,1,Length[A]}](*Convert List to product*)
NF[A_,a_]:=0
NF[A_,a_,b_]:=0
L[l_]:=DeleteCases[Table[ToExpression[Characters[ToString[l]][[Subscript[i,1]]]],{Subscript[i,1],1,Length[Characters[ToString[l]]]}],Null]
SeqTensor[A_,a_]:=Sequence[A,L[a]]
Sub[A_,b_]:=If[A=!=\[ScriptCapitalD],TensorComplete[A,L[b],{}],Subscript[A,b]]
Sub[A_,b1_,b2_]:=TensorComplete[A,Flatten[List[L[b1],\[ScriptCapitalD]1,L[b2]]],{}]
FindTensorIfExists[A_,a_,b_]:=Module[{l0},
l0=Intersection[
Flatten[Position[Map[Part[#,1]&,Tensors],A]]
,
Flatten[Position[Map[Length[ClearIndices[Part[#,2],1]]&,Tensors],Length[a]]]
,
Flatten[Position[Map[Length[ClearIndices[Part[#,2],-1]]&,Tensors],Length[b]]]
];
If[Length[l0]==0,
False,
If[Length[Part[Tensors,First[l0]]]>=3,
If[Part[Part[Tensors,First[l0]],3]=!=Null,
l0
,
False
]
,
False
]
]
]
FindObjectIfExists[A_,a_,b_]:=Module[{l0},
l0=Intersection[
Flatten[Position[Map[Part[#,1]&,Tensors],A]]
,
Flatten[Position[Map[Length[ClearIndices[Part[#,2],1]]&,Tensors],Length[a]]]
,
Flatten[Position[Map[Length[ClearIndices[Part[#,2],-1]]&,Tensors],Length[b]]]
]
]
TensorComplete[A_,a_,b_]:=OnePower[A,b,a]
ClearIndices[A_,B_]:=Map[ReplaceAll[Abs[Part[A,#]],{Abs->Leave}]&,
Map[First,Position[Map[If[Length[#]==1,Flatten[{1,#}],#]&,Map[Flatten[List[#]]&,ReplaceAll[A,{Times->List}]]],B]]
]

(*End Converting to \[CapitalTau]*)
(*Tensor Publish*)
TR[A_]:=ReplaceAll[ReplaceAll[A,{Subscript[\[ScriptCapitalD], 1]->NormalDerivative}],{\[CapitalTau]->TensorForm}]
TensorForm[T_,a_,b_]:=Subsuperscript[T,StringList[b],StringList[a]]
StringList[l_]:=StringJoin[Table[ToString[l[[i1]]],{i1,1,Length[l]}]]
(*End Tensor Publish*)
(*Summing Repeated Indices*)
SumIndices[A_]:=Sum[Object[Flatten[{ReplaceAll[A,{Plus->List}]}][[I5]]],{I5,1,Length[Flatten[{ReplaceAll[A,{Plus->List}]}]]}]
Object[A_]:=Indices[Flatten[{ReplaceAll[A,{Times->List}]}]]
RepeatedIndices[A_,B_]:=Cases[Intersection[A,B],_Symbol]
LORI[A_]:=RepeatedIndices[Flatten[Table[ReplaceAll[ReplaceAll[ReplaceAll[A,{(A0_)^\[Alpha]_->A0}][[I8]],{Subscript[\[ScriptCapitalD],\[Alpha]_]->TopIndex}],{\[CapitalTau]->TopIndex}],{I8,1,Length[A]}]],Flatten[Table[ReplaceAll[ReplaceAll[ReplaceAll[A,{(A0_)^\[Alpha]_->A0}][[I8]],{Subscript[\[ScriptCapitalD],\[Alpha]_]->DownIndex}],{\[CapitalTau]->DownIndex}],{I8,1,Length[A]}]]]

Indices[A_]:=If[Length[LORI[A]]==0,Original[A],Sum[Original[A],ReplaceAll[Table[ReplaceAll[Join[{LORI[A][[I3]]},{1,Len}],{List->I4}],{I3,1,Length[LORI[A]]}],{List->Sequence,I4->List}]]]

Original[A_]:=Product[A[[I2]],{I2,1,Length[A]}]
TensorIndices[A_,a_,b_]:=Flatten[Join[a,b]]
TensorIndices[A_,a_]:=Flatten[Join[ReplaceAll[A,{\[CapitalTau]->TensorIndices}],Flatten[{a}]]]
NumberIndices[A_,a_,b_]:=Length[Flatten[Join[a,b]]]
NumberIndices[A_,a_]:=ReplaceAll[A,{\[CapitalTau]->NumberIndices}]+Length[Flatten[{a}]]
TopIndex[A_,a_,b_]:=a
DownIndex[A_,a_,b_]:=b
TopIndex[a_,b_]:=If[ListQ[ReplaceAll[a,{\[CapitalTau]->TopIndex}]],Flatten[ReplaceAll[a,{\[CapitalTau]->TopIndex}]],{}]
DownIndex[a_,b_]:=If[ListQ[ReplaceAll[a,{\[CapitalTau]->DownIndex}]],Flatten[Join[ReplaceAll[a,{\[CapitalTau]->DownIndex}],{b}]],Flatten[{b}]]
TensorName[A_,a_,b_]:=A
TensorName[A_,a_]:=A
(*End Summing Repeated Indices*)
(*\[ScriptCapitalD] Opertors*)

HD[HD[A_,a_],b_]:=Subscript[\[ScriptCapitalD]O,1][A,Flatten[Join[{a},{b}]]](*Higher Derivative*)
Leave[A_]:=A
ListOfIndices:=Map[ToExpression[StringJoin["Global`",#]]&,Characters["abcdefghijklmnopqrstuvwxyz\[Alpha]\[Beta]\[Gamma]\[Delta]\[CurlyEpsilon]\[Zeta]\[Eta]\[Theta]\[Iota]\[Kappa]\[Lambda]\[Mu]\[Nu]\[Xi]\[Omicron]\[Rho]\[FinalSigma]\[Sigma]\[Tau]\[Upsilon]\[CurlyPhi]\[Chi]\[Psi]\[Omega]"]]

FreeIndex[A_,b_]:=Module[{r0=Complement[ListOfIndices,Flatten[Join[{ReplaceAll[A,{\[CapitalTau]->TopIndex,D1->TopIndex,D2->TopIndex}]},{ReplaceAll[A,{\[CapitalTau]->DownIndex,D1->DownIndex,D2->DownIndex}]},{b}]]]},r0[[1]]]

ListOfIntegers[A_]:=Length[DeleteCases[A,_Integer]]==0
Subscript[\[ScriptCapitalD]O,\[Alpha]_][A_,a_]:=Which[\[Alpha]==1,If[NumberQ[A],0,Subscript[\[ScriptCapitalD],\[Alpha]][A,Sort[Flatten[{a}]]]],\[Alpha]==2,CovariantDerivative[A,Flatten[{a}]]]
Subscript[IR,\[Alpha]_][A_,a_]:=Module[{A0=Flatten[{ReplaceAll[A,{Plus->List}]}]},If[Length[A0]==1,A0=Flatten[{ReplaceAll[A,{Times->List,Power->TensorToPower}]}];
If[Length[A0]==1,If[NumberQ[A],0,Subscript[ReturnIR,\[Alpha]][A,Flatten[{a}]]],Sum[Product[Complement[A0,Flatten[{A0[[r0]]}]][[l0]],{l0,1,Length[Complement[A0,Flatten[{A0[[r0]]}]]]}] Subscript[IR,\[Alpha]][A0[[r0]],a],{r0,1,Length[A0]}]],Sum[Subscript[IR,\[Alpha]][A0[[r0]],a],{r0,1,Length[A0]}]]]

NormalDerivative[A_,a_]:=If[NumberQ[A],0,If[IntegerQ[ReplaceAll[A,{\[CapitalTau]->NF}]],\[CapitalTau][ReplaceAll[A,{\[CapitalTau]->TensorName}],ReplaceAll[A,{\[CapitalTau]->TopIndex}],Join[ReplaceAll[A,{\[CapitalTau]->DownIndex}],{","},Sort[Flatten[{a}]]]],\[CapitalTau][A,{},Join[{","},Sort[Flatten[{a}]]]]]]
CovariantDerivative[A_,b_]:=If[Length[Flatten[List[ReplaceAll[A,{Plus->List}]]]]==1,(*********************)Subscript[\[ScriptCapitalD], 1][A,Flatten[{b}]]+Module[{A0=First[A],A1=Last[A],iCovariant},iCovariant[B0_,B1_,B2_,B3_]:=Module[{Global`Repeat},ReplacePart[A,B2->Global`Repeat] \[CapitalTau][\[CapitalGamma],Flatten[{If[B3==2,Global`Repeat,Apply[Part,Flatten[List[A,B2]]]]}],Flatten[{If[B3==1,Global`Repeat,Apply[Part,Flatten[List[A,B2]]]],b}]]];
If[IntegerQ[ReplaceAll[A,{Subscript[\[ScriptCapitalD],1]->NF}]],Plus[Sum[iCovariant[A0,ReplaceAll[A0,{\[CapitalTau]->TopIndex}][[r0]],{1,2,r0},1],{r0,1,Length[ReplaceAll[A0,{\[CapitalTau]->TopIndex}]]}],-Sum[iCovariant[A0,ReplaceAll[A0,{\[CapitalTau]->DownIndex}][[r0]],{1,3,r0},2],{r0,1,Length[ReplaceAll[A0,{\[CapitalTau]->DownIndex}]]}],-Sum[iCovariant[A0,A1[[r0]],{2,r0},2],{r0,1,Length[A1]}],0 Module[{Global`Repeat},If[Length[ReplaceAll[A,{Subscript[\[ScriptCapitalD],1]->TopIndex}]]==0,A \[CapitalTau][\[CapitalGamma],{Global`Repeat},Flatten[{Global`Repeat,b}]],0]]],Plus[Sum[iCovariant[A,ReplaceAll[A,{\[CapitalTau]->TopIndex}][[r0]],{2,r0},1],{r0,1,Length[ReplaceAll[A,{\[CapitalTau]->TopIndex}]]}],-Sum[iCovariant[A,ReplaceAll[A,{\[CapitalTau]->DownIndex}][[r0]],{3,r0},2],{r0,1,Length[ReplaceAll[A,{\[CapitalTau]->DownIndex}]]}],0 Module[{Global`Repeat},If[Length[ReplaceAll[A,{\[CapitalTau]->TopIndex}]]==0,A \[CapitalTau][\[CapitalGamma],{Global`Repeat},Flatten[{Global`Repeat,b}]],0]-If[Length[ReplaceAll[A,{\[CapitalTau]->DownIndex}]]==0,A \[CapitalTau][\[CapitalGamma],{Global`Repeat},Flatten[{Global`Repeat,b}]],0]]]]]
(*********************),Subscript[\[ScriptCapitalD],2][A,b]]

TensorToPower[A1_,B1_]:=Apply[Sequence,Table[A1,{r5,1,B1}]]
(*End \[ScriptCapitalD] Opertors*)
(*New Functions*)
(***********************************************************)
UnContract[A_]:=UnContract3[A, "Regular"] 
UnContract3[A_, B_] := 
 Module[{list0 = A, SplitTensor, Zero\[CapitalTau], 
   ObjectWithoutCoefficient, SuperThereExistsRepeated, 
   SuperThereExistsRepeateds, Motherlist, WhichIndex, 
   UnContractedForm, CheckRepeated, itemsleft, GoodIndex},
  If[Length[Flatten[{ReplaceAll[A, {Plus -> List}]}]] <= 1, Return[A]];
  ObjectWithoutCoefficient[A0_] := Module[{list3},
    list3 = Table[
      list3 = 
       Flatten[{ReplaceAll[
          A0[[n0]], {Times -> List, Power -> TensorToPower}]}];
      list3 = Complement[list3, Select[list3, NumberQ]];
      Product[list3[[r0]], {r0, 1, Length[list3]}]
      , {n0, 1, Length[A0]}];
    list3
    ];
  WhichIndex[A0_] := Module[{list3},
    list3 = 
     Table[Intersection[List[A0[[1, r0, t0]]], 
       List[A0[[2, r0, d0]]]], {r0, 1, Len}, {t0, 1, 
       Length[A0[[1, r0]]]}, {d0, 1, Length[A0[[2, r0]]]}];
    Position[
      Sum[
      ReplaceAll[list3, {List[] -> List[0]}][[r0]]
      , {r0, 1, Length[list3]}] 
     ,
     List[Sum[r0, {r0, 1, Len}]]
     ]
    ];
  
  (************************)
 GoodIndex[A0_]:=Module[{list8},
list8=Split[A0,First[#1]==First[#2]&];
list8=Table[
List[
DeleteDuplicates[Table[First[list8[[r2,r3]]],{r3,1,Length[Part[list8,r2]]}]]
,
DeleteDuplicates[Table[Last[list8[[r2,r3]]],{r3,1,Length[Part[list8,r2]]}]]
]
,{r2,1,Length[list8]}];
list8=Split[list8,Last[#1]==Last[#2]&];
list8=Table[
List[
Flatten[DeleteDuplicates[Table[First[list8[[r2,r3]]],{r3,1,Length[Part[list8,r2]]}]]]
,
Flatten[DeleteDuplicates[Table[Last[list8[[r2,r3]]],{r3,1,Length[Part[list8,r2]]}]]]
]
,{r2,1,Length[list8]}];
list8
];
(************************)
Zero\[CapitalTau]     [A1_, a0_, b0_] := 
    ReplaceAll[\[CapitalTau][A1, a0, b0], {_Integer -> 0}];
  UnContractedForm[A0_] := Module[{list2, mlist, nlist, slist, rlist},
    list2 = ReplaceAll[A0, {Times -> List, Power -> TensorToPower}];
    list2 = Map[Flatten, Map[List, list2]];
    mlist = List[
      ReplaceAll[
       Last[SuperThereExistsRepeated[list2]], {\[CapitalTau] -> 
         TopIndex}]
      ,
      ReplaceAll[
       Last[SuperThereExistsRepeated[list2]], {\[CapitalTau] -> 
         DownIndex}]
      ];
    mlist = Map[Flatten, mlist, List[2]];
    rlist = Apply[Join, GoodIndex[WhichIndex[mlist]]];
    slist = 
     If[B == "Random", Module[{Global`Repeat}, Global`Repeat], 
      Complement[ListOfIndices, Flatten[mlist]][[1]]];
    mlist = List[
      ReplacePart[mlist[[1, 1]], 
       Table[First[rlist][[r0]] -> slist, {r0, 1, 
         Length[First[rlist]]}]]
      ,
      ReplacePart[mlist[[2, 1]], 
       Table[Last[rlist][[r0]] -> slist, {r0, 1, Length[Last[rlist]]}]]
      ];
    nlist = Flatten[List[First[Last[SuperThereExistsRepeated[A0]]]]];
    itemsleft = Complement[itemsleft, A0];
    Times[
	(*********Coefficient***********)
    ReplaceAll[
      Select[Flatten[{ReplaceAll[First[A0], {Times -> List}]}], 
       NumberQ], {List -> Times}]
     (******************************)
	 ,
     Product[
      \[CapitalTau][
       ReplaceAll[nlist[[n0]], {\[CapitalTau] -> TensorName}]
       ,
       Extract[First[mlist],
        Table[
         List[i0]
         , {i0,
          
          Sum[Length[
             ReplaceAll[
              nlist[[l0]], {\[CapitalTau] -> TopIndex}]], {l0, 1, 
             n0 - 1}] + 1
          ,
          
          Sum[Length[
            ReplaceAll[
             nlist[[l0]], {\[CapitalTau] -> TopIndex}]], {l0, 1, n0}]
          }]
        ]
       ,
       Extract[Last[mlist],
        Table[
         List[i0]
         , {i0,
          
          Sum[Length[
             ReplaceAll[
              nlist[[l0]], {\[CapitalTau] -> DownIndex}]], {l0, 1, 
             n0 - 1}] + 1
          ,
          
          Sum[Length[
            ReplaceAll[
             nlist[[l0]], {\[CapitalTau] -> DownIndex}]], {l0, 1, n0}]
          }]
        ]
       ]
      , {n0, 1, Length[nlist]}]
	  ]
    ];
  SuperThereExistsRepeated[A0_] := 
   Module[{list10, list3 = A0, list4, WithOutIntegers\[CapitalTau], 
     CheckOrder},
    list3 = ReplaceAll[A0, {Times -> List, Power -> TensorToPower}];
    list3 = 
     Map[DeleteCases[#, 
        Apply[Times, Select[First[list3], NumberQ]]] &, list3];
    list3 = 
     Map[SortBy[#1, 
        ReplaceAll[#1, {\[CapitalTau] -> Zero\[CapitalTau]}] &] &, 
      list3];
    list4 = 
     Leave[WhichIndex[
       List[Map[Flatten, 
         ReplaceAll[list3, {\[CapitalTau] -> TopIndex}]], 
        Map[Flatten, 
         ReplaceAll[list3, {\[CapitalTau] -> DownIndex}]]]]];
    If[Length[list4] == 0,
     list3 = Tuples[Map[Permutations, list3]];
     list4 = 
      Module[{t1 = 
         Map[Flatten, ReplaceAll[list3, {\[CapitalTau] -> TopIndex}], 
          List[2]], 
        d1 = Map[Flatten, 
          ReplaceAll[list3, {\[CapitalTau] -> DownIndex}], List[2]]},
       Table[List[t1[[r0]], d1[[r0]]], {r0, 1, Length[t1]}]
       ];
     list4 = 
      Map[If[Length[GoodIndex[#]] == 1, True, False] &, 
       Map[WhichIndex, list4]];
     list3 = If[Length[Position[list4, True]] == 0, {UnContractable},
       List[A0, Flatten[list3[[First[Position[list4, True]]]], 1]]
       ]
     ,
     If[Length[list4] == 1,
      list3 = List[A0, list4, list3];
      ,
      list3 = {UnContractable};
      ]
     ];
    list3
    ];
  SplitTensor[A0_] := Module[{list1, list3},
    list1 = ReplaceAll[A0, {Plus -> List}];
    list1 = 
     SortBy[list1, 
      SumIndices[
        ReplaceAll[#, {\[CapitalTau] -> Zero\[CapitalTau]}]] &];
    list1 = 
     Split[list1, 
      SumIndices[
         ReplaceAll[#1, {\[CapitalTau] -> Zero\[CapitalTau]}]] == 
        SumIndices[
         ReplaceAll[#2, {\[CapitalTau] -> Zero\[CapitalTau]}]] &];
    list1 = 
     Map[DeleteDuplicates, 
      Map[Sort, Map[Permutations[#, List[Len]] &, list1], List[2]]];
    list1 = Apply[Join, list1];
    list1 = 
     DeleteCases[Map[First, Map[SuperThereExistsRepeated, list1]], 
      UnContractable];
    list1
    ];
  Motherlist = A;
  While[Length[SplitTensor[Motherlist]] >= 1,
   itemsleft = ReplaceAll[Motherlist, {Plus -> List}];
   Motherlist = SplitTensor[Motherlist];
   Motherlist = Map[UnContractedForm, Motherlist];
   Motherlist = Join[Motherlist, itemsleft];
Motherlist =  DeleteDuplicates[Motherlist, SumIndices[#1]===SumIndices[#2]&];
   ];

   Motherlist = DeleteCases[Motherlist, Null];
  Apply[Plus, Motherlist]
  ]
(****************************\[Delta]Tensor************************)
\[Delta]Tensor[A_] := 
 Module[{list0 = 
    Flatten[{ReplaceAll[A, {Times->List, Power->TensorToPower}]}],
    Do\[Delta], Arrange\[Delta], mainlist},
  (******If[Subscript[\[ScriptCapitalD], 1][\!\(
\*SubsuperscriptBox[\(\[Delta]\), \(b\), \(a\)], c\)] Or Exp without \[Delta]'s]******)
  If[Length[
     Position[list0, 
     Subscript[\[ScriptCapitalD], \[Alpha]1_][\[CapitalTau][\[Delta], a0_, 
        b0_], c0_]]] > 0, Return[0]];
  If[Length[Position[list0, \[CapitalTau][\[Delta], a0_, b0_]]] == 0, 
   Return[Apply[Times, Flatten[List[A]]]]];
  (*******************************************)
  Arrange\[Delta][A0_] := Module[{lists = Flatten[A0]},
    While[
     Length[Position[lists, \[CapitalTau][\[Delta], a0_, b0_]]] > 0,
     lists = 
       Delete[lists, 
        First[Position[lists, \[CapitalTau][\[Delta], a0_, b0_]]]];
     ];
    lists = Join[Complement[A0, lists], lists]
    ];
  Do\[Delta][A0_] :=
   Module[{list5, list2, list3 = A0},
    (*************)
    list5 = 
     Flatten[ReplaceAll[
       First[list3], {\[CapitalTau] -> TensorIndices}]];
    list2 = 
     Intersection[
      Flatten[ReplaceAll[
        Drop[list3, 1], {\[CapitalTau] -> TensorIndices, 
         Subscript[\[ScriptCapitalD], \[Alpha]_] -> TensorIndices}]], 
      DeleteCases[list5, _Integer]];
    (*************)
    If[First[
       Flatten[Position[list3, \[CapitalTau][\[Delta], a0_, b0_]]]] ==
       1,(* If the first element of the list is \[Delta] *)
     Which[Length[list2] == 1,
      Which[Length[DeleteDuplicates[list5]] == 2,
       list3 = 
        ReplaceAll[
         Drop[list3, 
          1], {ReplaceAll[
           Join[list2, Complement[list5, list2]], {List -> Rule}]}]
       , Length[DeleteDuplicates[list5]] == 1,
       list3 = Join[Drop[list3, 1], Take[list3, 1]]
       ]
      , Length[list2] == 0,
      list3 = Join[Drop[list3, 1], Take[list3, 1]]
      , Length[list2] == 2,
      list3 = 
       ReplaceAll[Drop[list3, 1], {ReplaceAll[list5, {List -> Rule}]}]
      ]
     ];
    Return[list3]
    ];
  (*********If one \[Delta] or many******************)
  (*********Send******************)
mainlist=Arrange\[Delta][list0];
  While[Length[
      Flatten[Position[
        List[First[Do\[Delta][mainlist]]], \[CapitalTau][\[Delta], 
         a0_, b0_]]]] == 1 && Length[mainlist] > 1,
   mainlist = Do\[Delta][mainlist];
   ];
  Apply[Times, Do\[Delta][mainlist]]
]
(***********************************************************)
SimplifyTensor[A_]:=SimplifyTensor$[ReplaceAll[UndoTensorForm[A],{Subscript[\[ScriptCapitalD], 1]->NormalDerivative}]]
InnerTensor[A0_]:=Module[{B1=ReplaceAll[A0,{\[CapitalTau]->TensorName}],B2=ReplaceAll[A0,{\[CapitalTau]->TopIndex}],B3=ReplaceAll[A0,{\[CapitalTau]->DownIndex}]},
If[Length[Position[B3,","]]==0,A0,\[CapitalTau][B1,B2,Take[B3,Position[B3,","][[1,1]]-1]]]
];
OuterTensor[A0_]:=Module[{B1=ReplaceAll[A0,{\[CapitalTau]->TensorName}],B2=ReplaceAll[A0,{\[CapitalTau]->TopIndex}],B3=ReplaceAll[A0,{\[CapitalTau]->DownIndex}]},
If[Length[Position[B3,","]]==0,{},Drop[B3,Position[B3,","][[1,1]]]]
];
FindIndices[A0_,B0_]:=Module[{h0=ReplaceAll[InnerTensor[A0],{\[CapitalTau]->FindObjectIfExists}]},
If[Length[h0]==0,{},
If[Length[Part[Tensors,Apply[Leave,h0]]]<B0,{{}},
If[Part[Part[Tensors,Apply[Leave,h0]],B0]===Null,{{}},
Part[Part[Tensors,Apply[Leave,h0]],B0]
]
]
]
];

SimplifyTensor$[A_]:=Module[{l0,l9,PermuteIndices,ApplySymmetry,Symmetry,Reform,Least},
PermuteIndices[A0_]:=Map[Apply[Sequence,#]&,Table[
DeleteCases[DeleteDuplicates[Map[If[Length[Sort[#]]==Length[DeleteDuplicates[Sort[#]]],Sort[#],Null]&,Tuples[A0,r0]]],Null]
,{r0,1,Length[A0]}]];ApplySymmetry[A0_,B0_]:=Module[{f0},
Fold[
Symmetry[#1,#2]
&,A0,B0]
];
Symmetry[A0_,B0_]:=Module[{M1=Apply[Times,Complement[Flatten[List[ReplaceAll[A0,{Times->List}]]],Select[Flatten[List[ReplaceAll[A0,{Times->List}]]],NumberQ]]],s0,y0,a0,b0,A1,k0,p0},
s0=ReplaceAll[M1,{\[CapitalTau]->FindObjectIfExists}];
A1=ReplaceAll[M1,{\[CapitalTau]->TensorName}];
y0=Part[Part[Tensors,First[FindObjectIfExists[A1,ReplaceAll[M1,{\[CapitalTau]->TopIndex}],ReplaceAll[M1,{\[CapitalTau]->DownIndex}]]]],2];
p0=Flatten[Table[Position[y0,Part[B0,r0]],{r0,1,Length[B0]}]];
k0=Sort[Table[Part[Join[ReplaceAll[M1,{\[CapitalTau]->TopIndex}],ReplaceAll[M1,{\[CapitalTau]->DownIndex}]],Part[p0,s0]],{s0,1,Length[p0]}]];
a0=ReplaceAll[M1,{\[CapitalTau]->TopIndex}];
b0=ReplaceAll[M1,{\[CapitalTau]->DownIndex}];
For[r0=1,r0<=Length[p0],r0++,
If[Length[a0]>=Part[p0,r0]
,
a0=ReplacePart[a0,Part[p0,r0]->Part[k0,r0]];
,
b0=ReplacePart[b0,Part[p0,r0]-Length[a0]->Part[k0,r0]];
]
];
If[M1===\[CapitalTau][A1,a0,b0],A0,
Times[
s0=Which[MemberQ[FindIndices[A0,4],B0],1,MemberQ[FindIndices[A0,5],B0],-1];
If[s0===Null,1,s0]
,
Apply[Times,Select[Flatten[List[ReplaceAll[A0,{Times->List}]]],NumberQ]]
,
\[CapitalTau][A1,a0,b0]
]
]
];
Reform[A0_]:=Module[{m0={},p0,l1},
l1=MapIndexed[
Module[{},
p0=ToExpression[Apply[StringJoin,List["r",Map[ToString,#2]]]];
m0=Append[m0,List[p0,1,Length[#1]]];
StopPart[#1,p0]
]&
,A0,List[2]];
l1=Map[Apply[Times,#]&,l1,List[1]];
l1=Map[Apply[Plus,#]&,l1,List[0]];
ReplaceAll[Flatten[Apply[Table,Prepend[m0,l1]]],{StopPart->Part}]
];

l0=Map[Flatten[List[ReplaceAll[#,{Times->List,Power->TensorToPower}]]]&,Flatten[List[ReplaceAll[A,{Plus->List}]]]];
l0=Map[
Module[{l1,l2},
If[NumberQ[#],List[#],
(***********************)
l2=#;
l1=DeleteCases[List[Apply[Sequence,FindIndices[#,4]],Apply[Sequence,FindIndices[#,5]]],List[]];
l1=Map[Apply[Sequence,Permutations[#]]&,PermuteIndices[l1]];
l1=DeleteDuplicates[
Join[
List[l2],
Map[
If[Length[OuterTensor[l2]]==0,
ApplySymmetry[l2,#]
,
Subscript[\[ScriptCapitalD], 1][ApplySymmetry[InnerTensor[l2],#],OuterTensor[l2]]
]
&,l1
]
]
];
l1
]
(***********************)
]&,l0,List[2]
];
Least[A0_]:=If[Length[A0]==1,1,
First[Flatten[Position[MapIndexed[Apply[LessEqual,Prepend[Sort[Delete[A0,First[#2]]],Part[A0,First[#2]]]]&,A0],True]]]];

l0=DeleteDuplicates[Map[ReplaceAll[DivideAndConquer[#],{Subscript[\[ScriptCapitalD], 1]->NormalDerivative}]&,Reform[l0]]];
l0=Part[l0,
Least[
Map[
Apply[Plus,
Map[
Length
,
Map[
Flatten[List[ReplaceAll[#,{Times->List,Power->TensorToPower}]]]
&,Flatten[List[ReplaceAll[#,{Plus->List}]]]]
]
]
&,l0]
]
];
TR[l0]
]
(****************EvaExp************)
PickElement2[A_,a_,b_]:=If[FindTensorIfExists[A,a,b],
Module[{l0},
l0=FindTensorIfExists[A,a,b];
l0=First[Part[Tensors,l0]];
l0=ReplaceAll[
SuperReady[Part[l0,3]]
,Join[
MapIndexed[
If[Apply[StringJoin,Take$[Characters[ToString[#]],4]]=="Hide",
Part[b,First[#2]]->#1
,
Part[ClearIndices[Part[l0,2],-1],First[#2]]->ToExpression[StringJoin["Hide",ToString[Part[b,First[#2]]]]]
]
&,b
]
,
MapIndexed[
If[Apply[StringJoin,Take$[Characters[ToString[#]],4]]=="Hide",
Part[a,First[#2]]->#1
,
Part[ClearIndices[Part[l0,2],1],First[#2]]->ToExpression[StringJoin["Hide",ToString[Part[a,First[#2]]]]]
]
&,a
]
]
];
l0
]
,\[CapitalTau][A,a,b]]


PickElement[A_,a_,b_]:=Module[{HideIndex},
HideIndex[A0_]:=If[Apply[StringJoin,Take$[Characters[ToString[A0]],4]]=="Hide"||Apply[StringJoin,Take$[Characters[ToString[A0]],6]]=="Repeat",A0,
ToExpression[StringJoin["Hide",ToString[A0]]]
];
If[Length[FindTensorIfExists[A,a,b]]==0,\[CapitalTau][A,a,b],
Fold[ReplaceAll,
Module[{k0=SuperReady[FindIndices[\[CapitalTau][A,a,b],3]]},
k0=Flatten[List[ReplaceAll[k0,{Plus->List}]]];
k0=Map[Fold[ReplaceAll[#1,Module[{Global`Repeat},#2->Global`Repeat]]&,#,Module[{list0=Flatten[List[ReplaceAll[k0,{Times->List}]]]},list0=Complement[list0,Select[list0,NumberQ]];
list0=Intersection[Flatten[ReplaceAll[list0,{Subscript[\[ScriptCapitalD], 1]->TopIndex,\[CapitalTau]->TopIndex}]],Flatten[ReplaceAll[list0,{Subscript[\[ScriptCapitalD], 1]->DownIndex,\[CapitalTau]->DownIndex}]]]]]&,k0];
Apply[Plus,k0]
]
,
Join[
MapIndexed[#1->HideIndex[Part[b,First[#2]]]&,ClearIndices[FindIndices[\[CapitalTau][A,a,b],2],-1]]
,
MapIndexed[#1->HideIndex[Part[a,First[#2]]]&,ClearIndices[FindIndices[\[CapitalTau][A,a,b],2],1]]
]
]
]
]
EvaExp[A_] := EvaExp[A, False]
EvaExp[A_, B_] := 
 Module[{a0 = SuperReady[UndoTensorForm[A]], SplitObject, MergeObject, 
   Do\[CapitalTau]},
  SplitObject[A0_] := Flatten[List[ReplaceAll[A0, {Plus -> List}]]];
  MergeObject[A0_] := Map[Apply[Plus, #] &, A0, List[0]];
  Do\[CapitalTau][A0_] := 
Module[{k0 = A0, k1 = {}},
If[k0 === ReplaceAll[k0, {\[CapitalTau] -> PickElement}],
k0=DivideAndConquer[k0];
k0 = Apply[Plus, Map[\[Delta]Tensor, Flatten[{ReplaceAll[k0, {Plus -> List}]}]]];
k0=ReplaceAll[k0,{ Subscript[\[ScriptCapitalD], 1]->NormalDerivative}];
k0
,
k0 = Flatten[List[ReplaceAll[k0, {Times -> List}]]];
For[r0 = 1, r0 <= Length[k0], r0++,
If[Part[k0, r0] =!= 
ReplaceAll[Part[k0, r0], {\[CapitalTau] -> PickElement}],k1 = Join[k1, List[Part[k0, r0]]];]
];
k0 = Do\[CapitalTau][Apply[Times, Complement[k0, k1]]];
k1 = 
Apply[Times,
 Map[
MergeObject[
Map[
Do\[CapitalTau][#] &, 
SplitObject[
DivideAndConquer[
ReplaceAll[#, {\[CapitalTau] -> PickElement}]
]
]
]
] 
&, k1
]
];
ExpandAll[Times[k1, k0]
]
]
];
  a0 = SplitObject[a0];
  a0 = Map[Do\[CapitalTau][#] &, a0, List[1]];
  a0 = MergeObject[a0];
  a0 = Flatten[List[ReplaceAll[a0, {Plus -> List}]]];

a0 = Map[Flatten[List[ReplaceAll[#, {Times -> List, Power -> TensorToPower}]]] &, a0];
  a0=
   Map[
    Module[{l0 = #, l1, l2, l3},
      l1 = #;
      l1 = Complement[l1, Select[l1, NumberQ]];
      l2 = 
       DeleteCases[
        Flatten[ReplaceAll[l1, {\[CapitalTau] -> TensorIndices}]], 
        ","];
      l2 =
       MapIndexed[
        If[
           StringJoin[Drop[Characters[ToString[#]], -1]] == "Hide",
           
           l0 = ReplaceAll[
             l0, {ToExpression[StringJoin[Characters[ToString[#]]]] ->ToExpression[
                StringJoin[Take[Characters[ToString[#1]], -1]]]
                }]
           ];
         &, l2
        ];
      l0
      ]
     &, a0
    ];
  a0=
   Map[
    Module[{l0 = #, l1, l2, l3},
      l1 = #;
      l1 = Complement[l1, Select[l1, NumberQ]];
      l2 = 
       DeleteCases[
        Flatten[ReplaceAll[l1, {\[CapitalTau] -> TensorIndices}]], 
        ","];
      l2 =
       MapIndexed[
        If[
           StringJoin[Take$[Characters[ToString[#]], 6]] == "Repeat",
           l0 = ReplaceAll[l0, {#1 ->
                First[Complement[ListOfIndices, 
                 Flatten[
                  ReplaceAll[
                   Complement[l0, 
                    Select[l0, NumberQ]], {\[CapitalTau] -> 
                    TensorIndices}]]]]
              }]
           ];
         &, l2
        ];
      l0
      ]
     &, a0
    ];
  a0 = Apply[Plus, Map[Apply[Times, Flatten[#]]&, a0]]; a0 = Apply[Plus,Map[\[Delta]Tensor, Flatten[{ReplaceAll[a0, {Plus -> List}]}]]];
 TR[ a0]
  ]

DivideAndConquer[A0_] := Module[{l0 = A0},
  While[
   l0 =!= 
    ExpandAll[
     ReplaceAll[
      ReplaceAll[
       ExpandAll[
        ReplaceAll[
         ReplaceAll[
          l0, {\[ScriptCapitalD] -> IR}], {ReturnIR -> \[ScriptCapitalD]}], {Subscript[\[ScriptCapitalD], 1] -> HD}], {HD -> Subscript[\[ScriptCapitalD], 1]}], {\[ScriptCapitalD] -> \[ScriptCapitalD]O}]],
   l0 = 
    ExpandAll[
     ReplaceAll[
      ReplaceAll[
       ExpandAll[
        ReplaceAll[
         ReplaceAll[
          l0, {\[ScriptCapitalD] -> IR}], {ReturnIR -> \[ScriptCapitalD]}], {Subscript[\[ScriptCapitalD], 1] -> HD}], {HD -> Subscript[\[ScriptCapitalD], 1]}], {\[ScriptCapitalD] -> \[ScriptCapitalD]O}]]];
  l0 = ReplaceAll[
    ReplaceAll[
     l0, {Subscript[\[ScriptCapitalD], 1] -> HD}], {HD -> 
      Subscript[\[ScriptCapitalD], 1]}];
  l0
  ]
(***********************************************************)
(*-----------------------------------------------*)
End[]

Protect@@Names["Afak`*"];
EndPackage[]
